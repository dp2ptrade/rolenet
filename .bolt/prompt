You are an AI software engineer tasked with building a production-ready, professional networking app called RoleNet. The app is designed to connect users based on their professional roles and needs. You must build this using React Native (with Expo), Zustand for state management, Firebase for backend services, and other necessary tools.

Project Name: RoleNet

App Summary:
RoleNet is a real-time, professional matchmaking app that allows users from any field (e.g., teacher, driver, doctor, student, shopkeeper, architect, etc.) to connect globally and locally. Users discover professionals based on role and tag filters, send connection requests (“pings”), and initiate calls and chat. The app is designed to be inclusive, fast, and intuitive.

---

## 🔑 Core Features:

1. Onboarding & Authentication
- Firebase Auth (email/password or phone auth)
- Onboarding flow: select professional popular role or custom role, add popular tags or custom tag, location permission and location data.
- Profile setup: name, photo, short bio

### 2. User Profiles
- Public profile with role, tags, rating, online status, availability toggle, interaction options
- Users can edit bio, tags, avatar, location data and visibility
- other user could rate and endorse from profile.

### 3. Discover & Search
- Nearby professionals (via GPS)
- Global search (by role, tags, distance)
- Real-time filters: availability, distance, online status
- User cards showing avatar, name, role, rating, "Ping" button, “view profile” button.

### 4. Ping System
- Users send “Pings” with a note/request
- Ping statuses: pending, responded, ignored
- Ping triggers push notification to receiver (via FCM)
- Respond with chat or friend request

### 5. Friend Requests
- View current friends and activity history
- Send/accept/decline friend requests

### 6. Calling System
- Peer-to-peer audio calling via `react-native-webrtc`
- Firebase Firestore as signaling server
- TURN/STUN support for NAT traversal
- Call UI: incoming screen, mute, speaker, end

### 7. Chat System (Optional Post-Friend Request or Post-Ping)
- Real-time messaging via Firestore
- Support for text and media (images/audio)
- Read receipts, typing indicators
- Push notifications on new messages

### 8. Ratings & Reviews
- After a call or chat, users can rate the experience (1–5 stars)
- Leave optional text feedback
- Ratings update user’s profile average
- Prevent duplicate ratings for same interaction

### 9. Ping Activity Page
- Tabs: Received, Sent, Responded
- Each item shows timestamp, message, user info
- Quick reply actions (Call, chat, Ignore)

### 10. Settings & Notifications
- Manage availability, visibility, notifications
- Push notifications with `expo-notifications` + Firebase Cloud Messaging
- Privacy and block options

---

## 🔧 State Management (Zustand)
- User state
- Friends and pings
- Call state
- Chat state
- Notification preferences

---

## 🧠 Firebase Setup
- Firebase Auth
- Cloud Firestore for users, pings, calls, chats
- Firebase Functions (for automated FCM notifications)
- Firebase Storage (profile photos, media messages)
- Firebase Cloud Messaging

---

## 📄 Data Models

### Users
- id, name, role, tags, location, avatar, onlineStatus, createdAt, rating, ratingCount

### Pings
- id, senderId, receiverId, message, status, createdAt

### Calls
- id, callerId, calleeId, offer, answer, iceCandidates, status, createdAt

### Friends
- id, userA, userB, status, createdAt

### Chats
- id, participants, lastMessage, lastMessageTime, unreadCount, createdAt

### Messages (Subcollection under Chats)
- id, senderId, text, mediaUrl, type, status, timestamp

### Ratings
- id, raterId, ratedUserId, rating, feedback, context, createdAt

---

## 🎨 UI/UX Design Guidelines

- Unique layout with gradient blue/teal theme
- Modern rounded components (Tailwind-like spacing)
- Bottom tab navigation (Discover, Activity, Friends, Profile)
- Clean typography, responsive layouts
- Use `react-native-paper` or `react-native-ui-lib` for reusable UI

---

## 📦 Required Dependencies

- react-native
- expo
- expo-go
- zustand
- firebase
- react-navigation
- react-native-webrtc
- expo-location
- expo-notifications
- @react-native-firebase/app
- @react-native-firebase/messaging
- react-native-paper or react-native-ui-lib
- @expo/vector-icons
- react-native-dotenv

---

## 🚀 Deliverables

- Full source code with modular structure
- All Zustand stores (user, pings, calls, chat, rating)
- Firebase config, rules, and cloud functions
- Push notification setup
- UI components and screen flows
- App icon and splash screen
- Complete README and Firebase setup guide

---

Branding:
App Name: RoleNet
Tagline: "Every Role. One Network."
Voice: Inclusive, professional, direct
Design: Blue/teal palette, modern typography, clear icons

Screens to Implement:
- Onboarding
- Login/Sign Up
- Profile Setup
- Discover (Nearby/Global)
- Profile (View/Edit)
- Ping Activity
- Friends
- Call Screen
- Chat Screen
- Settings

Goal:
Build a complete and production-ready mobile app using React Native and Expo, with Firebase and Zustand, that connects people professionally across roles and needs — globally and locally — with support for discovery, pings, calling, chatting and friend networking.



New additinal page: (Posts)

Core Features of the Post Page
Here’s a strong base post page structure:
🧱 Post Card Structure
Each service post should include:
* Title of the Service (e.g., "Full-stack Web Development", "Legal Consultancy for Startups")
* Professional Name + Profile Link
* Category (e.g., Developer, Designer, Lawyer, Consultant, Coach)
* Location / Remote Availability
* Brief Description (up to 200 characters)
* Tags/Skills (e.g., #React, #UXDesign, #StartupLaw)
* Pricing (Fixed or Hourly)
* Availability Timeline (e.g., "Available from July", "Immediate Start")
* Ratings / Reviews Count
* Pin / Book Now / Chat CTA
* Bookmark / Save Button

🔍 Search & Filter Options
Let users search and sort service posts with:
* Search Bar (by keyword, tag, title)
* Category Filter (dropdown or chips)
* Location Filter (city, country, remote)
* Sort By: Newest, Top Rated, Price (low to high), Availability
* Experience Level: Junior, Mid, Senior
* Service Type: One-time, Long-term, Consulting, Coaching
* Rating Filter (4+ stars etc.)
* Price Range Slider

🌟 Suggestions to Make the Post Page Unique & Powerful
✅ 1. AI Match Score
Show how well a post matches the user's profile or needs using AI. For example: “87% Match — Based on your interest in mobile app development”

✅ 2. Video/Voice/Image Pitch Support
Let professionals attach a 1-minute video pitch or voice intro or Image to their post — helps humanize the service offering and builds trust.

✅ 3. Smart Availability Calendar
Professionals can show a calendar with their availability, and users can book slots or consultations directly from the post.

✅ 4. “Service Bundle” or “Starter Package”
Professionals can offer predefined service bundles, e.g.:
* 💼 “Portfolio Website in 3 Days — $150”
* 📄 “Legal Audit for Startup Docs — $99”

✅ 5. Verified Badge / Background Check
A badge for verified professionals (verified ID or credentials) to boost credibility.

✅ 6. Microblog or Case Studies
Allow professionals to add a short post or success story as a "showcase" linked to the service. (e.g., “I helped X company grow 300% with SEO”)

✅ 7. Collaborative Projects
Let multiple professionals co-create a post (e.g., a designer + developer offering a complete app design + build service).

✅ 8. Live Chat or Consultation Booking
* Quick DM option
* Or allow scheduling a free discovery call via calendar integration

✅ 9. Reputation Metrics
* Success rate
* Total projects completed via the platform
* Avg. response time

✅ 10. Post Boosting
Professionals can boost their post to appear on top or get featured in a category.

🎨 UI Design Suggestions
* Masonry/Grid View of post cards
* Use of category color tags or badges
* Sticky filters/sidebar for better UX

📲 Bonus: Mobile Experience
Make sure the post card and filters are:
* Tap-friendly
* Scrollable (to go through posts like cards)
* Has a floating “Filter” and “Sort” button